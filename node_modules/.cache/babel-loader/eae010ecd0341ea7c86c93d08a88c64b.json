{"ast":null,"code":"import _slicedToArray from \"K:\\\\ALevel\\\\REACT\\\\shop-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"K:\\\\ALevel\\\\REACT\\\\shop-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport React from \"react\";\nimport API from \"./../../API\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"pending\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: \"pending\"\n      });\n\n    case \"resolved\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload,\n        status: \"resolved\"\n      });\n\n    case \"rejected\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: \"rejected\",\n        error: action.error\n      });\n\n    default:\n      throw new Error();\n  }\n}\n\nvar useQuery = function useQuery(_ref) {\n  var query = _ref.query,\n      _ref$variables = _ref.variables,\n      variables = _ref$variables === void 0 ? {} : _ref$variables,\n      initialState = _ref.initialState;\n\n  var _React$useReducer = React.useReducer(reducer, initialState, function (initialData) {\n    return {\n      error: null,\n      status: \"idle\",\n      data: initialData\n    };\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    dispatch({\n      type: \"pending\"\n    });\n    API.request(query, variables).then(function (data) {\n      dispatch({\n        type: \"resolved\",\n        payload: data\n      });\n    }).catch(function (error) {\n      console.log(\"e\", error);\n      dispatch({\n        type: \"rejected\",\n        error: error\n      });\n    });\n    return;\n  }, []);\n  return state;\n};\n\nexport default useQuery;","map":{"version":3,"sources":["K:/ALevel/REACT/shop-project/src/shared/hooks/use-query.js"],"names":["React","API","reducer","state","action","type","status","data","payload","error","Error","useQuery","query","variables","initialState","useReducer","initialData","dispatch","useEffect","request","then","catch","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,SAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,MAAM,EAAE;AAFV;;AAIF,SAAK,UAAL;AACE,6CAAYH,KAAZ;AAAmBI,QAAAA,IAAI,EAAEH,MAAM,CAACI,OAAhC;AAAyCF,QAAAA,MAAM,EAAE;AAAjD;;AACF,SAAK,UAAL;AACE,6CAAYH,KAAZ;AAAmBG,QAAAA,MAAM,EAAE,UAA3B;AAAuCG,QAAAA,KAAK,EAAEL,MAAM,CAACK;AAArD;;AACF;AACE,YAAM,IAAIC,KAAJ,EAAN;AAXJ;AAaD;;AAED,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA6C;AAAA,MAA1CC,KAA0C,QAA1CA,KAA0C;AAAA,4BAAnCC,SAAmC;AAAA,MAAnCA,SAAmC,+BAAvB,EAAuB;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;;AAAA,0BAClCd,KAAK,CAACe,UAAN,CACxBb,OADwB,EAExBY,YAFwB,EAGxB,UAACE,WAAD;AAAA,WAAkB;AAChBP,MAAAA,KAAK,EAAE,IADS;AAEhBH,MAAAA,MAAM,EAAE,MAFQ;AAGhBC,MAAAA,IAAI,EAAES;AAHU,KAAlB;AAAA,GAHwB,CADkC;AAAA;AAAA,MACrDb,KADqD;AAAA,MAC9Cc,QAD8C;;AAW5DjB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAM;AACpBD,IAAAA,QAAQ,CAAC;AAAEZ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACAJ,IAAAA,GAAG,CAACkB,OAAJ,CAAYP,KAAZ,EAAmBC,SAAnB,EACGO,IADH,CACQ,UAACb,IAAD,EAAU;AACdU,MAAAA,QAAQ,CAAC;AAAEZ,QAAAA,IAAI,EAAE,UAAR;AAAoBG,QAAAA,OAAO,EAAED;AAA7B,OAAD,CAAR;AACD,KAHH,EAIGc,KAJH,CAIS,UAACZ,KAAD,EAAW;AAChBa,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBd,KAAjB;AACAQ,MAAAA,QAAQ,CAAC;AAAEZ,QAAAA,IAAI,EAAE,UAAR;AAAoBI,QAAAA,KAAK,EAAEA;AAA3B,OAAD,CAAR;AACD,KAPH;AAQE;AACH,GAXD,EAWG,EAXH;AAaA,SAAON,KAAP;AACD,CAzBD;;AA2BA,eAAeQ,QAAf","sourcesContent":["import React from \"react\";\nimport API from \"./../../API\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"pending\":\n      return {\n        ...state,\n        status: \"pending\"\n      };\n    case \"resolved\":\n      return { ...state, data: action.payload, status: \"resolved\" };\n    case \"rejected\":\n      return { ...state, status: \"rejected\", error: action.error };\n    default:\n      throw new Error();\n  }\n}\n\nconst useQuery = ({ query, variables = {}, initialState }) => {\n  const [state, dispatch] = React.useReducer(\n    reducer,\n    initialState,\n    (initialData) => ({\n      error: null,\n      status: \"idle\",\n      data: initialData\n    })\n  );\n\n  React.useEffect(() => {\n    dispatch({ type: \"pending\" });\n    API.request(query, variables)\n      .then((data) => {\n        dispatch({ type: \"resolved\", payload: data });\n      })\n      .catch((error) => {\n        console.log(\"e\", error);\n        dispatch({ type: \"rejected\", error: error });\n      });\n      return\n  }, []);\n\n  return state;\n};\n\nexport default useQuery;\n"]},"metadata":{},"sourceType":"module"}