{"ast":null,"code":"import _regeneratorRuntime from \"K:\\\\ALevel\\\\REACT\\\\shop-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"K:\\\\ALevel\\\\REACT\\\\shop-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"K:\\\\ALevel\\\\REACT\\\\shop-project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query auth($login: String!, $password: String!) {\\n    login(login: $login, password: $password)\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from \"graphql-request\";\nimport API from \"./../../API\";\nvar loginQuery = gql(_templateObject());\nexport var login = function login(values) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch, _, api) {\n      var _yield$api$request, _login;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              dispatch({\n                type: \"login/pending\"\n              });\n              _context.next = 4;\n              return api.request(loginQuery, values);\n\n            case 4:\n              _yield$api$request = _context.sent;\n              _login = _yield$api$request.login;\n              // const { login } = await API.requet(loginQuery, values);\n              console.log(\"login\", _login);\n\n              if (_login === null) {\n                dispatch({\n                  type: \"login/rejected\"\n                });\n              }\n\n              localStorage.setItem(\"token\", _login);\n              api.setHeader(\"Authorization\", \"Bearer \".concat(_login));\n              dispatch({\n                type: \"login/resolved\"\n              });\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              dispatch({\n                type: \"login/rejected\"\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["K:/ALevel/REACT/shop-project/src/services/auth/actions.js"],"names":["gql","API","loginQuery","login","values","dispatch","_","api","type","request","console","log","localStorage","setItem","setHeader"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,GAAT,QAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,IAAMC,UAAU,GAAGF,GAAH,mBAAhB;AAMA,OAAO,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAACC,MAAD;AAAA;AAAA,wEAAY,iBAAOC,QAAP,EAAiBC,CAAjB,EAAoBC,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAE7BF,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AAF6B;AAAA,qBAGLD,GAAG,CAACE,OAAJ,CAAYP,UAAZ,EAAwBE,MAAxB,CAHK;;AAAA;AAAA;AAGrBD,cAAAA,MAHqB,sBAGrBA,KAHqB;AAI7B;AAEAO,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBR,MAArB;;AACA,kBAAIA,MAAK,KAAK,IAAd,EAAoB;AAClBE,gBAAAA,QAAQ,CAAC;AAAEG,kBAAAA,IAAI,EAAE;AAAR,iBAAD,CAAR;AACD;;AACDI,cAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BV,MAA9B;AACAI,cAAAA,GAAG,CAACO,SAAJ,CAAc,eAAd,mBAAyCX,MAAzC;AACAE,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AAZ6B;AAAA;;AAAA;AAAA;AAAA;AAc7BH,cAAAA,QAAQ,CAAC;AAAEG,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;;AAd6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAd","sourcesContent":["import { gql } from \"graphql-request\";\nimport API from \"./../../API\";\n\nconst loginQuery = gql`\n  query auth($login: String!, $password: String!) {\n    login(login: $login, password: $password)\n  }\n`;\n\nexport const login = (values) => async (dispatch, _, api) => {\n  try {\n    dispatch({ type: \"login/pending\" });\n    const { login } = await api.request(loginQuery, values);\n    // const { login } = await API.requet(loginQuery, values);\n\n    console.log(\"login\", login);\n    if (login === null) {\n      dispatch({ type: \"login/rejected\" });\n    }\n    localStorage.setItem(\"token\", login);\n    api.setHeader(\"Authorization\", `Bearer ${login}`);\n    dispatch({ type: \"login/resolved\" });\n  } catch (error) {\n    dispatch({ type: \"login/rejected\" });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}